; svn $Id$
;+
; NAME:
;   MGH_OBJ_STRING
;
; PURPOSE:
;   Given an object reference (or array thereof), this function returns
;   a descriptive string, as generated by the PRINT command
;
; CALLING SEQUENCE:
;   Result = MGH_OBJ_STRING(Obj)
;
; INPUTS:
;   Obj:            An object reference.
;
; WARNING:
;   If the SHOW_NAME or SHOW_TITLE keyword is set, then the function attempts to call
;   the GetProperty method associated with the object in order to retrieve the name or title.
;   If the method call raises an error, then the error is trapped silently and the name is
;   left null. This is very slow (order 1 s per object) for objects that do not support
;   a GetProperty method, as IDL will search the path if it can't find the method in memory.
;
;###########################################################################
;
; This software is provided subject to the following conditions:
;
; 1.  NIWA makes no representations or warranties regarding the
;     accuracy of the software, the use to which the software may
;     be put or the results to be obtained from the use of the
;     software.  Accordingly NIWA accepts no liability for any loss
;     or damage (whether direct of indirect) incurred by any person
;     through the use of or reliance on the software.
;
; 2.  NIWA is to be acknowledged as the original author of the
;     software where the software is used or presented in any form.
;
;###########################################################################
;
; MODIFICATION HISTORY:
;   Mark Hadfield, Oct 1999:
;     Written.
;   Mark Hadfield, Feb 2000:
;     Originally the object ID string was generated by printing to a file
;     then reading the file. I just noticed the STRING function's PRINT keyword,
;     which does this in one command.
;-
function MGH_OBJ_STRING, Obj, SHOW_NAME=show_name, SHOW_TITLE=show_title

   compile_opt DEFINT32
   compile_opt STRICTARR

    if size(obj, /TNAME) ne 'OBJREF' then message, 'The argument is not of object type.'

    out = mgh_reproduce('', obj)

    ; Get object ID strings by printing to a temporary file

    for i=0,n_elements(obj)-1 do out[i] = string(obj[i], /PRINT)

    ; Add NAME property

    if keyword_set(show_name) then begin

        for i=0,n_elements(obj)-1 do begin

            if obj_valid(obj[i]) then begin
                name = ''
                catch, err  &  if err ne 0 then goto, bad_name
                obj[i]->GetProperty, NAME=name
                catch, /CANCEL
                bad_name:
                if size(name, /TYPE) eq 7 then if strlen(name) gt 0 then out[i] = out[i] + ' (' + name + ')'
            endif

        endfor

    endif

    ; Add TITLE property

    if keyword_set(show_title) then begin

        for i=0,n_elements(obj)-1 do begin

            if obj_valid(obj[i]) then begin
                title = ''
                catch, err  &  if err ne 0 then goto, bad_title
                obj[i]->GetProperty, TITLE=title
                catch, /CANCEL
                bad_title:
                if size(title, /TYPE) eq 7 then if strlen(title) gt 0 then out[i] = out[i] + ' (' + title + ')'
            endif

        endfor

    endif

    return, out

end


